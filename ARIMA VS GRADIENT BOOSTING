{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPgklfe8AZ5/UDSdQEUQdJz",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Mainuddin123/192124049-DSA0503/blob/main/ARIMA%20VS%20GRADIENT%20BOOSTING\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 839
        },
        "id": "OIoz0xeN9pc8",
        "outputId": "86c489f4-57cc-4142-b46f-c09083b2f364"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it is not monotonic and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it is not monotonic and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it is not monotonic and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n",
            "  warn('Non-invertible starting MA parameters found.'\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:836: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n",
            "  return get_prediction_index(\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:836: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n",
            "  return get_prediction_index(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ARIMA Accuracy: 29.15%\n",
            "Gradient Boosting Accuracy: 42.59%\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from statsmodels.tsa.arima.model import ARIMA\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import GradientBoostingRegressor\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import mean_absolute_error\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Load the dataset\n",
        "file_path = '/content/WLD_RTFP_country_2023-10-02.csv'\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "# Assuming 'Date' column is in datetime format\n",
        "df['Date'] = pd.to_datetime(df['Date'])\n",
        "df.set_index('Date', inplace=True)\n",
        "\n",
        "# Data preprocessing\n",
        "# Customize this part based on your dataset and features\n",
        "features_arima = ['High']  # Features for ARIMA\n",
        "features_gb = ['Inflation']  # Features for Gradient Boosting\n",
        "target_variable = 'Close'\n",
        "\n",
        "# Handle missing values in features for ARIMA\n",
        "imputer_arima = SimpleImputer()\n",
        "df[features_arima] = imputer_arima.fit_transform(df[features_arima])\n",
        "\n",
        "# Handle missing values in features for Gradient Boosting\n",
        "imputer_gb = SimpleImputer()\n",
        "df[features_gb] = imputer_gb.fit_transform(df[features_gb])\n",
        "\n",
        "# Handle missing values in the target variable\n",
        "imputer_target = SimpleImputer(strategy='mean')  # You can choose another strategy if needed\n",
        "df[target_variable] = imputer_target.fit_transform(df[target_variable].values.reshape(-1, 1)).squeeze()\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_arima = df[features_arima]\n",
        "X_gb = df[features_gb]\n",
        "y = df[target_variable]\n",
        "\n",
        "X_train_arima, X_test_arima, y_train, y_test = train_test_split(X_arima, y, test_size=0.2, random_state=42)\n",
        "X_train_gb, X_test_gb, _, _ = train_test_split(X_gb, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# ARIMA model\n",
        "arima_model = ARIMA(y_train, order=(5, 1, 2))  # Adjust the order based on your data\n",
        "arima_fit = arima_model.fit()\n",
        "\n",
        "# Gradient Boosting model\n",
        "gb_model = GradientBoostingRegressor(n_estimators=100, random_state=42)  # You can adjust parameters based on your data\n",
        "gb_model.fit(X_train_gb, y_train)\n",
        "\n",
        "# Make predictions\n",
        "arima_predictions = arima_fit.forecast(steps=len(X_test_arima))\n",
        "gb_predictions = gb_model.predict(X_test_gb)\n",
        "\n",
        "# Calculate Mean Absolute Error (MAE)\n",
        "arima_mae = mean_absolute_error(y_test, arima_predictions)\n",
        "gb_mae = mean_absolute_error(y_test, gb_predictions)\n",
        "\n",
        "# Print MAE as a percentage of the mean value of the target variable\n",
        "target_mean = y.mean()\n",
        "arima_accuracy = (1 - arima_mae / target_mean) * 100\n",
        "gb_accuracy = (1 - gb_mae / target_mean) * 100\n",
        "\n",
        "# Create a bar chart for comparison\n",
        "labels = ['ARIMA', 'Gradient Boosting']\n",
        "mae_values = [arima_mae, gb_mae]\n",
        "\n",
        "print(f'ARIMA Accuracy: {arima_accuracy:.2f}%')\n",
        "print(f'Gradient Boosting Accuracy: {gb_accuracy:.2f}%')\n",
        "\n",
        "plt.bar(labels, mae_values, color=['blue', 'purple'])\n",
        "plt.xlabel('Algorithm')\n",
        "plt.ylabel('Mean Absolute Error (MAE)')\n",
        "plt.title('Comparison of Algorithms (Lower MAE is better)')\n",
        "plt.show()\n"
      ]
    }
  ]
}